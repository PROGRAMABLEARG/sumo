// Definición de pines
const int PWMA = 11;
const int AIN1_A = 48;
const int AIN2_A = 49;

const int PWMB = 10;
const int AIN1_B = 47;
const int AIN2_B = 46;

// Inicialización de los motores
void setup() {
    pinMode(PWMA, OUTPUT);
    pinMode(AIN1_A, OUTPUT);
    pinMode(AIN2_A, OUTPUT);
    pinMode(PWMB, OUTPUT);
    pinMode(AIN1_B, OUTPUT);
    pinMode(AIN2_B, OUTPUT);
    
    // Hacer avanzar durante 3 segundos
    controlarMotores("adelante", 200);
    delay(3000);  // Esperar 3 segundos
    detenerMotores();  // Detener los motores
}

void loop() {
    // El loop puede estar vacío si solo necesitas que avance una vez
}

// Función para controlar los motores
void controlarMotores(String direccion, int velocidad) {
    velocidad = constrain(velocidad, 0, 255);

    if (direccion == "adelante") {
        digitalWrite(AIN1_A, HIGH);
        digitalWrite(AIN2_A, LOW);
        analogWrite(PWMA, velocidad);
        
        digitalWrite(AIN1_B, HIGH);
        digitalWrite(AIN2_B, LOW);
        analogWrite(PWMB, velocidad);
    }
    else if (direccion == "atras") {
        digitalWrite(AIN1_A, LOW);
        digitalWrite(AIN2_A, HIGH);
        analogWrite(PWMA, velocidad);
        
        digitalWrite(AIN1_B, LOW);
        digitalWrite(AIN2_B, HIGH);
        analogWrite(PWMB, velocidad);
    }
    else if (direccion == "derecha") {
        digitalWrite(AIN1_A, HIGH);
        digitalWrite(AIN2_A, LOW);
        analogWrite(PWMA, velocidad);
        
        digitalWrite(AIN1_B, LOW);
        digitalWrite(AIN2_B, HIGH);
        analogWrite(PWMB, velocidad);
    }
    else if (direccion == "izquierda") {
        digitalWrite(AIN1_A, LOW);
        digitalWrite(AIN2_A, HIGH);
        analogWrite(PWMA, velocidad);
        
        digitalWrite(AIN1_B, HIGH);
        digitalWrite(AIN2_B, LOW);
        analogWrite(PWMB, velocidad);
    }
    else {
        detenerMotores();  // Si la dirección no es válida, detener motores
    }
}

// Función para detener los motores
void detenerMotores() {
    analogWrite(PWMA, 0);
    analogWrite(PWMB, 0);
}
